
load prelude.maude

fmod DATA is
  pr QID .
  pr STRING .
  pr INT .
  pr NAT .
  pr FLOAT .


sorts Oid Uid Data Expr NonPrivData PrivData MsgId Vid .
subsort NonPrivData PrivData < Data .
subsort Oid MsgId Uid < NonPrivData .
subsort Data < Expr .
subsort Qid < Vid < Expr .
***subsort Policy < Data .

sorts OidList UidList ExprList DataList PolicyList Policy Tags TagsList VidList NeExprList NeDataList .
subsort Vid < VidList < ExprList .
subsort Oid < OidList .
subsort Uid < UidList .
subsort Policy < Expr .
subsort Policy < PolicyList < ExprList .
subsort Expr < NeExprList < ExprList .
subsort Data < NeDataList < DataList .
subsort DataList < ExprList .
subsort Tags < Expr .
subsort Tags < TagsList < ExprList .
subsort NeDataList < NeExprList .

sorts Purpose Entity Action PurposeSet EntitySet ActionSet .
subsort Purpose < PurposeSet .
subsort Entity < EntitySet .
subsort Action < ActionSet .

op {_,_} : PurposeSet PurposeSet -> PurposeSet [ctor].
op {_,_} : EntitySet EntitySet -> EntitySet [ctor] .
op {_,_} : ActionSet ActionSet -> ActionSet [ctor] .

op _,,_ : ExprList ExprList -> ExprList [ctor assoc id: emp prec 25] .
op _,,_ : NeExprList ExprList -> ExprList [ctor].
op _,,_ : ExprList NeExprList -> ExprList [ctor].
op _,,_ : NeDataList DataList -> DataList [ctor] .
op _,,_ : DataList NeDataList -> DataList [ctor] .
op _,,_ : PolicyList PolicyList -> PolicyList [ctor] .
op _,,_ : DataList DataList -> DataList [ctor ditto ] .
op _,,_ : EmpList EmpList -> EmpList [ctor ditto ] .


var U : UidList . var P : PurposeSet .
***op tags : Data Data -> Tags [ctor] .
***op tags : Expr Expr -> Tags [ctor] .
op nothing : -> NonPrivData [ctor] .
op user : Qid -> Uid [ctor] .
***op noUser : -> NonPrivData [ctor] .
op emp : -> DataList [ctor] .
op Policy(_,_,_) : EntitySet PurposeSet ActionSet -> Policy .
op tags : UidList PurposeSet  -> Tags .
op PrivateData(_,_) : NonPrivData Tags -> PrivData .
op US(_) : Tags -> UidList .
op PS(_) : Tags -> PurposeSet .
eq US(tags(U,P))   = U .
eq PS(tags(U,P))  = P .
op <_,,_> : TagsList TagsList -> TagsList [ctor] .
op _appen_ : NonPrivData NonPrivData -> NonPrivData [ctor] .
op _appen_ : PrivData NonPrivData -> PrivData [ctor] .
op _appen_ : NonPrivData PrivData -> PrivData [ctor] .
op _appen_ : PrivData PrivData -> PrivData [ctor] .
op _(_) : String ExprList -> Expr . *** function application
***helpers for function application
op fparams : String -> VidList .
op fdefn : String -> Expr .
***op _(_) : Qid DataList -> Data . *** function application

***converstion of data types into sort DATA

op null : -> NonPrivData [ctor] .
op newuser : Qid -> Uid [ctor] .
op ob :  Qid -> Oid [ctor] .
op n : Nat Oid -> MsgId [ctor] .
op int(_)  : Int       -> NonPrivData [ctor format(o o ! o o)] .
op float(_) : Float    -> NonPrivData [ctor format(o o ! o o)] .
op str(_)  : String    -> NonPrivData [ctor format(o o ! o o)] .
op bool(_) : Bool      -> NonPrivData [ctor format(o o ! o o)] .
op isnothing : DataList -> Bool .
***guard expression
op ?(_)  : Expr -> Expr [ctor format (! o d d d)] .
op $error : String -> Expr [ctor format (r o)] .


op _asInt             : Data -> Int .
eq int(I)  asInt      = I .
op _asNat             : Data -> Nat .
eq int(N)  asNat      = N .
op _asBool            : Data -> Bool .
eq bool(B) asBool     = B .
op _asStr             : Data -> String .
eq str(S)  asStr      = S .

var N : Nat .    var I : Int .
var B : Bool .   vars S  S' : String . vars Q Q' : Qid .
var O : Oid .

var DL : DataList .
vars D D'     : Data .
vars E E'     : Expr .
vars L L' L'' : ExprList .
ops _cat_  	  : Expr Expr -> Expr .
eq E cat E'      = 'plus [[[E ,, E']]] .
eq 'plus  [[[str(S),, str(S')]]]    = str(S + S') .
eq isnothing(D ,, DL) = ((D == nothing) or (D == null))or isnothing(DL)  .
***eq isnothing(D,, emp)= ((D == nothing) or (D == null)) .
***eq isnothing(D)= ((D == nothing) or (D == null)) .
eq isnothing(emp)= false .

endfm



view Vid from TRIV to DATA is
   sort Elt to Vid .
endv

view Data from TRIV to DATA is
   sort Elt to Data .
endv

view Expr from TRIV to DATA is
   sort Elt to Expr .
endv


fmod PAOL-CID is
  protecting CONFIGURATION .
  protecting QID .
  subsort Qid < Cid .

  op Class : -> Cid [ctor] .
  op None : -> Cid [ctor] .
endm

view Cid from TRIV to PAOL-CID is
  sort Elt to Cid .
endv


fmod PAOL-OID is
  protecting PAOL-CID .
  protecting NAT .
  protecting DATA .

  subsort Oid < Data .

  --- Constructor of object names
  op ob : Cid Int -> Oid [ctor] .
endfm

view Oid from TRIV to PAOL-OID is
  sort Elt to Oid .
endv

***Method names

fmod PAOL-MID is
  protecting QID .

  sort Mid .
  subsort Qid < Mid .
endm

mod PAOL-DATA-LABEL is

  extending DATA.
  protecting PAOL-OID .

  sort Label .
  subsort Label < Data .

  --- A label consists of the id of the sending object plus a unique number.
  op label : Oid Nat -> Label [ctor format (o o)] .
endm

view Label from TRIV to PAOL-DATA-LABEL is
  sort Elt to Label .
endv

*** Binding variables to values ***
***uses MAP from prelude
fmod PAOL-SUBST is
protecting MAP{Vid, Data} * (sort Map{Vid, Data} to Subst,
                               op empty : -> Map{Vid, Data} to noSub ) .

op dom : Vid Subst -> Bool .
op remove : Vid Subst -> Subst .

*** Non-comm composition operator for substitutions
op _#_ : Subst Subst -> Subst .
vars V V' : Vid .
var D : Data . vars S1 S2  : Subst .

eq S1 # noSub = S1 .
eq S1 # ((V |-> D), S2) = insert(V,D,S1) # S2 .

eq dom(V, noSub) = false .
eq dom(V, ((V' |-> D), S1)) = if V == V' then true else dom(V, S1) fi .
eq dom(V, S1 # S2) = dom(V, S1) or dom(V, S2) .

eq remove(V, (S1, V |-> D)) =  S1 .
eq remove(V, S1) =  S1 [owise] .


endfm



fmod PAOL-STATEMENTS is
protecting DATA .
protecting PAOL-SUBST .
protecting PAOL-CID .
protecting PAOl-MID .


sorts Stm .

op skip : -> Stm [ctor] .
op _:= NewUser : Vid -> Stm [ctor] .
op await_ : Expr -> Stm [ctor] .
op assign(_;_) : Vid Expr -> Stm [ctor] .
op assert_ : Expr -> AbortableStmt [ctor ] .
op asyncall(_:_!_(_)) : Vid Expr Mtd ExprList -> Stm [ctor] . *** async call
op _:= new_(_)[of _ ] : Var Cid ExprList Entity -> Stm [ctor] .
op get(_;_) : Vid Vid  -> Stm [ctor] .
op $call(_;_;_;_;_;_) : Oid Mid DataList Bool Rat Data -> Stm [ctor] .
***op _(_) : Mid ExprList  -> Stm [ctor] .  *** sync. call
op _:= newuser(_) : Var Uid -> Stm [ctor] .
op return(_) : Expr -> Stm [ctor] .
op _.addinst(_) : Expr Oid -> Stm [ctor] .
op _.remInst(_) : Expr Oid -> Stm [ctor] .
op _.addCon(_) : Expr Policy -> Stm [ctor] .
op _.remCon(_) : Expr Policy -> Stm [ctor] .

endfm

view Stm from TRIV to STATEMENTS is
   sort Elt to Stm .
endv

fmod STM-LIST is
pr PAOL-STATEMENTS .
pr PAOL-SUBST .

protecting LIST{Stm} * (sort List{Stm} to StmList,
                        sort NeList{Stm} to NeStmList,
                        op __ : List{Stm} List{Stm} -> List{Stm} to _;_) .
op if(_){_} : Expr StmList -> Stm [ctor] .
endfm




fmod PAOL-PROCESS is
pr STM-LIST .
sorts Process NeMProc MProc .
var L : Subst .
var st : Stm .
var SL : StmList .
var eta : Entity .


op idle : -> Process [ctor format (!b o )] .
op noProc : -> Process [ctor] .
op _+_ : Process Stm -> Process .
op _,_ : MProc MProc -> MProc [ctor assoc comm id: noProc] .
op {_|_}(_) : Subst StmList Entity -> Process [ctor format (o r nb o )] .

eq ({L|nil}(eta)) = idle .
eq ({L|SL}(eta) + st) = ({L|SL ; st}(eta)) .

endfm

fmod PAOL-METHOD is
  protecting STM-LIST .
  protecting PAOL-MID .
  sort Method .
  op <_: Method | Param:_, Latt:_, Code:_> :
    Mid VidList Subst StmtList -> Method
    [ctor format (nib ! ob o d sb o d sb o d sb o b o)] .

endm

view Method from TRIV to ABS-METHOD is
  sort Elt to Method .
endv





mod PAOL-CONFIGURATION is
  protecting DATA .
  protecting PAOL-PROCESS .
  protecting PAOL-OID .
  protecting PAOL-MID .
  protecting SET{Method} * (sort Set{Method} to MMtd,
                            op empty : -> Set{Method} to noMethod) .
  protecting SET{String} * (sort Set{String} to StringSet) .

  protecting SET{Policy} * (sort NeSet{Policy} to NeSetPl,
                              sort Set{Policy} to SetPl) .

  --- Define object identifiers.
  protecting CONVERSION .
  protecting COUNTER .
  protecting RANDOM .

  sorts Future Class Clock  .
  subsorts Class Future Clock Object Msg Consent < Configuration .
  vars B M : String .
  var C : Cid .
  vars O O' : Oid .
  vars L S S1 : Subst .
  vars P P' : Process .
  vars MS MS1 : MMtd .
  var W : MProc .
  var AL : VidList .
  vars SL SL1 : StmList .
  var EL : ExprList .
  var D : Data .
  var DL : DataList .
  var N : Label .
  vars F F' : Nat .
  var CN : Configuration .
  var T : Rat .
  vars LIM RAND : Nat .

  --- Invocation protocol.
  ---
  --- Invocation message generated by the calling object:
  ---    invoc(R,N,M,DL,S,AUX, OUTCOST, INCOST)
  --- R: The receiver.
  --- N: The label.
  --- M: The called method.
  --- DL: The actual arguments.
  --- S: Flag indicating whether the call was made synchronously, i.e. whether
  ---    a $cont statement should be generated at the end.
  --- AUX: additional process variables, currently .deadline (deadline)
  --- OUTCOST: remaining outgoing bandwidth cost
  --- INCOST: remaining incoming bandwidth cost
  op invoc : Oid Label Nat Mid DataList Entity -> Msg .

  --- Process creation in target object:
  --- M: the method.
  --- N: the future (label).
  --- DL: the parameters (already evaluated by the caller).
  --- B: whether to continue at caller or not.
  --- AUX: additional process variables, currently .deadline (deadline)
  --- T: arrival time
  --- S: the object state, needed for calculation of method cost
  op makeProcess : Method Label DataList Bool SSubst Nat Subst -> Process .
  --- Error and warning messages are intended to stop the machine.
  --- For now, nothing is emitting these.
  --- op error(_) : String -> [Msg] [ctor format (nnr r o! or onn)] .
  op warning(_) : String -> [Msg] [ctor format (nnr! r! r! or onn)] .
  ---Define Consent
  sort FutureStatus .
  ops Waiting Completed Error : -> FutureStatus .
  --- Terms that represent futures:
  --- L: Future label (globally unique)
  --- M: Method name (String, not used in calculations)
  --- S: Status of the future
  --- N: Reference count.  A future with N=0 and S/=Waiting can be removed.
  --- D: Result
  op future : Label Mid FutureStatus Nat Data -> Future .

  --- Define Classes.
  --- Class declaration.
  ---
  op <_: Class | Param:_, Att:_, Mtds:_, Ocnt:_> :
      Cid VidList Subst MMtd Nat -> Class
     [format (b! b o o o b o o  b o o  b o o  b on o  b o  b! on )] .

  op emptyClass : -> Class .
  eq emptyClass = < 'noClass : Cl | Inh: noInh, Par: emp, Att: noSub, Mtds: noMtd, Ocnt: 0 > .


  op <_: Clock | Limit:_> : Int Nat -> Clock
    [ctor format(nb m! ob b b b m! b n)] .
  op <_: Clock | Limit:_, Random:_> : Int Nat Nat -> Clock
    [ctor format(nb m! ob b b b m! b b m! b n)] .
  rl < T : Clock | Limit: LIM > => < T : Clock | Limit: LIM, Random: random(counter) > .


  *** Terms of sort Object represent objects.  They are stored inside Cogs.
  --- Oid: object ID
  --- Cid: class ID
  --- Subst: fields
  --- Nat: counter for generating unique future labels
  --- Bool: liveness of object
  op <_: Ob | Cl:_ | Att:_, Pr:_, Lcnt:_, Ent:_> :
         Oid Cid Subst Process Nat Subst -> Object
           [ctor format (nr! r o o o  r o r  r o r  r o r o r r! no)] .


  op noObj : -> Object [ctor] .

  sort Instances InstancesSet Consent .
  subsort Instances < InstancesSet .

  op consent(_:_,_): Uid SetPl InstancesSet ->  Consent [ctor format (nr! rr   o o o o o o o o o r! no) ] .


  *** Useful for real-time maude, and in general for accessing the whole
  *** configuration.  FIXME: We should use another name, since State is used
  *** in LOOP-MODE.
  sort State .

  op {_} : Configuration -> State [ctor] .

endm


***(fmod CLASS is
protecting STM-LIST .
protecting PAOL-PROCESS .
protecting PAOL-METHOD .
protecting PAOL-MID .
protecting

sorts Class  Mtd MMtd . ***


var S : Subst .
var SL : StmList .
vars Q Q' : Qid .
var MM : MMtd .
var DL : DataList .
var O : Oid .
var N : Nat .
var VL : VarList .
var eta : Entity .


op <_: Mtdname | Param:_, Latt:_, Code:_> :
    Qid VarList Subst StmList -> Mtd [ctor
      format (g! g o o o g o o g o o g o g o)] .

subsort Mtd < MMtd .    *** Multiset of methods

op noMtd : -> Mtd [ctor] .
op _*_  : MMtd MMtd -> MMtd [ctor assoc comm id: noMtd format (o o on o)] .



op <_: Cl | Inh:_, Par:_, Att:_, Mtds:_, Ocnt:_> :
    Cid InhList VarList Subst MMtd Nat -> Class
   [format (b! b o o o b o o  b o o  b o o  b on o  b o  b! on )] .

op emptyClass : -> Class .
eq emptyClass = < 'noClass : Cl | Inh: noInh, Par: emp, Att: noSub, Mtds: noMtd, Ocnt: 0 > .

*** Class/method functions ***
op get : Qid MMtd Oid Nat DataList Entity  -> Process .  *** fetches pair (code, vars)
op _in_ : Qid MMtd -> Bool .  *** checks if Q is a declared
                              *** method in the method multiset

eq Q in noMtd = false .
eq Q in (< Q' : Mtdname | Param: AL, Latt: S, Code: SL > * MM) =
     if (Q == Q') then true else (Q in MM) fi .

*** bind call to process
eq get(Q, noMtd, O, N, DL, eta) = noProc .
eq get(Q, < Q' : Mtdname | Param: AL, Latt: S, Code: SL > * MM, O, N, DL, eta) =
    if Q == Q'
    then (insert('caller, O, insert('cnCaller, eta, S)), ((AL :::= DL) ; SL) @ empty)
    else get(Q, MM, O, N, DL, eta) fi .

endfm



fmod OBJECT is
protecting CLASS .

sort Object .

op <_: Ob | Cl:_ | Att:_, Pr:_, Lcnt:_, Ent:_> :
       Oid Cid Subst Process Nat Subst -> Object
         [ctor format (nr! r o o o  r o r  r o r  r o r o r r! no)] .


op noObj : -> Object [ctor] .


endfm

fmod CONSENT is
protecting DATA .
protecting SET{Policy} * (sort NeSet{Policy} to NeSetPl,
                            sort Set{Policy} to SetPl) .
sort Instances InstancesSet Consent .
subsort Instances < InstancesSet .

op _ --> <_:_> : Uid SetPl InstancesSet ->  Consent [ctor  format (nr! rr   o o o o o o o o o r! no) ] .

endfm)




***(fmod COMMUNICATION is
  protecting OBJECT .
  protecting CONVERSION .
  pr CONSENT .

sort Msg MMsg Kid Queue .
subsort Msg < MMsg .

op none : -> MMsg [ctor] .
op _+_ : MMsg MMsg -> MMsg [ctor assoc comm id: none] .

*** INVOCATION and REPLY
op invoc(_,_,_,_,_) : Nat Oid Oid Qid List -> Msg [ctor     *** invocation
      format (rg o o o o o o o o o o o no)] .
op comp(_,_,_) : Nat Oid List -> Msg [ctor                  *** completion
      format (rg o o o o o o o no)] .
op error : String -> Msg [ctor] .                           *** error
op warning : String -> Msg [ctor] .                         *** warning
op new_(_) : Qid List -> Msg .              *** initialise program message

*** message queue, with function q for queue-name
*** op q : Oid -> Kid .

op < _: Qu | Ev:_> : Oid MMsg -> Queue [format (nm! m! om m m  m o m! no)] .

endfm)

fmod PAOL-EVAL is
protecting PAOL-SUBST .
protecting DATA .
protecting COUNTER .
protecting RANDOM .
protecting LIST {Expr} * (sort LIST{Expr} to list) .
pr BOOL-OPS .



*** Variables
var E E' E'' : Expr .
var EL : ExprList . var NeEl : NeExprList .
var V V' : Vid .
var VL : VidList .
var QID : Qid .
var M : Mid .
var St St1 : Stm .
vars SL SL1 Sl2 : StmList .
var CN : Configuration .
var CL : Class .
var OB : Object .
var O : Oid .
var FS : FutureStatus .
var OBJS : Configuration .
var D D' : Data .
var NPd NPd' : NonPrivData .
var Pd Pd' : PrivData .
var S S' : Subst .
var t t' : Tags .
var I : Int .
var B : Bool .
var STR : String .
var DL DL1 DL2 DL3 : DataList .
vars L L' : Label .




*** Evaluation of expressions
op eval	    : Expr Subst     -> Data .     *** evaluate expression
op eval	    : EmpList Subst     -> Data .     *** evaluate expression
op evalB    : Expr Subst     -> Bool .
op evalN    : Expr Subst     -> Nat .
op evalS    : Expr Subst     -> String .
op evalList : ExprList Subst -> DataList . *** maps list to values
op _+_      : Data Data -> Data .
op inList   : Data DataList -> Bool .


eq eval(A, S) = S [A] .
eq eval(D, S) = D .
eq PrivData(NPd , t) + PrivateData(NPd' , t') = PrivateData( (NPd appen NPd') , (union(U(t), U(t')), union ( P(t) , P(t')))) .
eq NPd + PrivData(NPd , t) = PrivateData( (NPd appen NPd') , t ) .
eq PrivData(NPd , t) + NPd = PrivateData( (NPd appen NPd') , t ) .
eq NPd + NPd' = NPd appen NPd' .
eq inList(D, emp) = false .
eq inList(D, D') = D == D' .
eq inList(D, (D',, DL)) = if (D == D') then true else inList(D, (DL)) fi .

eq evalN(E,S) = eval(E,S) asNat .                  *** expressions
eq evalB(E,S) = eval(E,S) asBool .                 *** expressions
eq evalS(E,S) = eval(E,S) asStr .                  *** expressions
eq eval (emp, S)= emp .

*** lists
eq evalList(emp, S)   = eval(emp, S) .
eq evalList(E,,EL, S) = eval(E, S),, evalList(EL, S) .

endfm





fmod CONFIG is
  protecting COMMUNICATION .

sort NConfiguration Configuration .

subsorts Object Msg Consent Class < NConfiguration .
op {_} : NConfiguration -> Configuration .

op noconf : -> NConfiguration [ctor] .
op __ : NConfiguration NConfiguration -> NConfiguration .
op main {_,_}_ : Subst StmList NConfiguration -> Configuration .
var C : Cid . var E : ExprList .  var SL : StmList . var L : Subst . var MC : NConfiguration .
eq main { L, SL } MC = { < ob('main) : 'class | Att: ('this |-> ob('main) , 'purpose |-> str('main), 'myContract |-> contract( str('main), ob('main) ) ),
                 Pr: (L, (SL)), Lcnt: 0, Db: noSub >  MC } .



***THE MACHINE***

mod INTERPRETER is
  pr PAOL-CONFIGURATION .
  pr EVAL .
  protecting CONVERSION .


vars O O' O'' : Oid .      vars C C' : Cid .
vars V V' V'' : Vid .      var VL : VidList .
vars E E' : Expr .     vars EL  : ExprList .        var D D' U : Data . var DL : DataList .
var ST : Stm .         vars SL SL' SL'' : StmList . vars SL1 SL2 : NeStmList .
var P : Process .
vars S S' L L' DB DB' : Subst .
vars N F N' : Nat .

vars eta eta' eta'' : Entity .
***vars I I' : InhList .
var MS : MMtd .
var NS : NatS .
var MM : MMsg .
var M : Mid .
var Q : Qid .
***var MsgBody : Body .
var B B' : Bool .
var T : Nat .
***var PL PL' : PolicyId .
***var CnSet CnSet' : SetCn .
vars Cn Cn' : Contract .
var Cfg : Configuration .
var NsD NsD' : Data .
***var SD  : SenData .
var Ncfg Ncfg' : NConfiguration .
var STRING : String .
var K : Key . var MSG : Msg . var CLASS : Class . var POLICY : Policy . ***var H : History .



op Sel(<_,_>, <_,_>) : Oid Entity Oid Entity ->  Pair .

op Inst (_,_,_) : UidList Consent Oid -> Bool .

op Act(_,_,_) : Consent Entity Tags -> ActionSet .


***Skip

rl
  < O : C | Att : S, Pr : (L| (skip ; SL) eta) , Lcnt: N, En :Eta >
 =>
  < O : C | Att: S, Pr: (L| (SL)eta), Lcnt: N, En :Eta >
  [label skip] .

*** varibale or field assignment

crl [assign-local*] :
< O : C | Att: S, Pr: (L|((A ::= E); SL) eta), Lcnt: N, En: eta >
=>
< O : C | Att: S, Pr: (insert(A,eval(E,(S # L)), L)| SL, eta ), Lcnt: N , En: eta >
if  NsD  := (eval(E, (S # L))) /\ (dom(A,L) == true)  .

crl [assign-field] :
< O : C | Att: S, Pr: (L|((A ::= E); SL) eta), Lcnt: N, En: eta >

=>
< O : C | Att: (insert(A, eval(E, S), S)), Pr: (L| SL, eta) , Lcnt: N , En: eta >
if  NsD  := (eval(E, (S # L))) /\ (dom(A,S) == true)  .

***Await

crl
     < O : C | Att: S, Pr: (L|(await E; SL) eta), Lcnt: N, En: eta >
  =>
    if guard is true  then
     < O : C | Att: S, Pr: ({L | SL}eta), Lcnt: N, En: eta >

    else
    < O : C | Att: S, Pr: ({L | await E ; SL}eta), Lcnt: N, En: eta >
    fi
  if O := L['this]
      [label await] .



***cond rule
crl
     < O : C | Att: S, Pr: ({L|if(E){S}; SL}eta), Lcnt: N, En: eta >
  =>
    if eval of E is true  then
     < O : C | Att: S, Pr: ({L | S; SL} eta), Lcnt: N, En: eta >

    else
    < O : C | Att: S, Pr: ({L | SL} eta), Lcnt: N, En: eta >
    fi
  if O := L['this]
      [label Cond] .


****return

crl
  < O : C | Att: S, Pr: ({L|return(E); SL}eta), Lcnt: N, En: eta >
  future(N, M, Waiting, G, null)
 =>
 < O : C | Att: S, Pr: ({L|markFutures(D); SL}eta), Lcnt: N, En: eta >
 future(N, M, Completed, G, null)
if O := L['this]
    /\ N == L['.label] /\ D := eval(E, (S :: L), none, ('.time |-> "num"[-1], '.deadline |-> L['.deadline], '.comp |-> DC:Data, '.random |-> L['.random]))
    [label return] .



  *** read future?


  crl
  < O : C | Att: S, Pr: ({L| get(A ; A'); SL}eta), Lcnt: N, En: eta >
  future(N, M, Completed, G, D)

  =>
  < O : C | Att: S, Pr: ({L| assign(A' ; D); SL}eta), Lcnt: N, En: eta >
  future(N, M, Completed, G, D)
  if O := L['this] /\ N := (S :: L)[A]
    [label receive-comp-var] .

  crl
  < O : C | Att: S, Pr: ({L| get(@ A ; A'); SL}eta), Lcnt: N, En: eta >
  future(N, M, Completed, G, D)

  =>
  < O : C | Att: S, Pr: ({L| assign(A' ; D); SL}eta), Lcnt: N, En: eta >
  future(N, M, Completed, G, D)
  if O := L['this] /\ N := S[A]
    [label receive-comp-field] .

***(

  rl [read-future] :
  < O : C | Att: S, Pr: (L, ((AL ::= M ?) ; SL) @ V),  Lcnt: F, Db: DB >
  ruleLabel(O', Ev)
   comp(O, DL)
  =>
  < O : C | Att: S,  Pr: (L, ((AL :::= DL) ; SL) @ V) , Lcnt: F, Db: DB >
  ruleLabel(O, otherEv) .)

***async call

ceq
  < CG : Cog | Objects: object(O, C, S, F, LIVE) OBJS, DC: DC:Data, Sched: SCH:Expr, Pr: { L | asynccall(A ; E ; M ; EL ; COST ; DE) ; SL }, PrQ: W >
  < T : Clock | Limit: LIM, Random: RAND >
=
  < CG : Cog | Objects: object(O, C, S, (s F), LIVE) OBJS, DC: DC:Data, Sched: SCH:Expr, Pr: { L | assign(A ; N) ; $call(N ; O1 ; M ; DL ; false ; OUTCOST ; eval(DE, (S :: L), none, ('.time |-> "num"[T], '.deadline |-> L['.deadline], '.comp |-> DC:Data, '.random |-> L['.random]))) ; SL }, PrQ: W >
  < T : Clock | Limit: LIM, Random: RAND >
  future(N, M, Waiting, 1, null)
if O := L['this]
    /\ DL :=  evalList(EL, (S :: L), none, ('.time |-> "num"[T], '.deadline |-> L['.deadline], '.comp |-> DC:Data, '.random |-> L['.random]))
    /\ O1 := eval(E, (S :: L), none, ('.time |-> "num"[T], '.deadline |-> L['.deadline], '.comp |-> DC:Data, '.random |-> L['.random]))
    /\ N := label(O, F)
    /\ "num"[OUTCOST] := eval(COST, (S :: L), none, ('.time |-> "num"[T], '.deadline |-> L['.deadline], '.comp |-> DC:Data, '.random |-> L['.random]))
    [label async-call] .

    crl [call-1] :
    {  < O : C | Att: S, Pr: (L, (( AL ::= E . M(EL)); SL) @ V), Lcnt: N, Db: DB > < O' : C' | Att: S', Pr: P, Lcnt: N', Db: DB' > Ncfg ruleLabel(O'', Ev)  }
    =>
    {  < O : C | Att: S, Pr: (L, ((AL ::=  M ?); SL) @ empty), Lcnt: N + 1 , Db: DB  >
    < O' : C' | Att: S', Pr: P, Lcnt: N', Db: DB' > (scope-empty(O) to Trace)
    (invoc(O, N, M , evalList(EL, (S # L)),  eval('myContract, S))  from O to O')  Ncfg ruleLabel(O, callEv)  }
     if (eval(E, (S # L)) == O') and ( comply(policyIn(evalList(EL, (S # L))), eval('myContract, S'), V, Ncfg) == true) .


  *** OBJECT CREATION
rl [new-object] :
< O : C | Att: S,Pr: (L, ((A ::= new C' (EL)); SL) @ V), Lcnt: N, Db: DB >
ruleLabel(O', Ev)
< C' : Cl | Inh: I , Par: AL, Att: S' , Mtds: MS , Ocnt: F >
=>
< O : C | Att: S, Pr: (L, ((A ::= newId(C', F)); SL) @ V), Lcnt: N, Db: DB >
ruleLabel(O, otherEv)
< C' : Cl | Inh: I , Par: AL, Att: S' , Mtds: MS , Ocnt: (F + 1) >
< newId(C',F) : C' | Att: noSub, Pr: idle, Lcnt: 1, Db: noSub >
findAttr(newId(C',F), I, (insert('purpose, str(C'), insert('myContract, contract(str(C'), newId(C',F)), S'))),
    (AL ::= evalList(EL, (S # L)))) .



 eq bindMtd(O, O', N, Q, DL,(C < EL >)## I', Cn)
 < C : Cl | Inh: I , Par: AL, Att: S , Mtds: MS , Ocnt: F >
    =  if (Q in MS) then boundMtd(O,get(Q,MS,O', N, DL, Cn))
                    else bindMtd(O,O',N,Q, DL, I ## I', Cn) fi
 < C : Cl | Inh: I , Par: AL, Att: S , Mtds: MS , Ocnt: F > .




endm
