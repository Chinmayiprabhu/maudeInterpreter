
load prelude.maude

fmod DATA is
  pr QID .
  pr STRING .
  pr INT .
  pr NAT .
  pr FLOAT .


sorts Oid Uid Data Expr NonPrivData PrivData MsgId Var .
subsort NonPrivData PrivData < Data .
subsort Oid MsgId Uid < NonPrivData .
subsort Data < Expr .
subsort Qid < Var < Expr .
***subsort Policy < Data .


sorts Purpose Entity Action PurposeSet EntitySet ActionSet .
subsort Purpose < PurposeSet .
subsort Entity < EntitySet .
subsort Action < ActionSet .



sorts OidList UidList ExprList DataList EmpList PolicyList Policy Tags TagsList VarList .
subsort var < VarList < ExprList .
subsort Oid < OidList .
subsort Uid < UidList .
subsort Policy < PolicyList .
subsort Expr < ExprList .
subsort Data < DataList < ExprList .
subsort Tags < TagsList .
subsort EmpList < DataList .

op nothing : -> NonPrivData [ctor] .
op User : -> Oid [ctor] .
op noUser : -> NonPrivData [ctor] .
op constant : -> NonPrivData [ctor] .
op emp : -> EmpList [ctor] .
***op tags : Data Data -> Tags [ctor] .
***op tags : Expr Expr -> Tags [ctor] .



op {_,_} : PurposeSet PurposeSet -> PurposeSet [ctor].
op {_,_} : EntitySet EntitySet -> EntitySet [ctor] .
op {_,_} : ActionSet ActionSet -> ActionSet [ctor] .
***op {_,_} : UserSet UserSet -> UserSet [ctor].
op _,,,_ : PolicyList PolicyList -> PolicyList [ctor] .
op _,,_  : ExprList ExprList -> ExprList [ctor assoc id: emp prec 25] .
op _,,_ : DataList DataList -> DataList [ctor ditto ] .
***op _,,,_ : AidList AidList -> AidList [ctor ditto ] .
var U : UidList . var P : PurposeSet .


op Policy(_,_,_) : EntitySet PurposeSet ActionSet -> Policy .
op tags : UidList PurposeSet  -> Tags .
op PrivateData(_,_) : NonPrivData Tags -> PrivData .
op US(_) : Tags -> UidList .
op PS(_) : Tags -> PurposeSet .
eq US(tags(U,P))   = U .
eq PS(tags(U,P))  = P .
op <_,,_> : TagsList TagsList -> TagsList [ctor] .
op _appen_ : NonPrivData NonPrivData -> NonPrivData [ctor] .
op _appen_ : PrivData NonPrivData -> PrivData [ctor] .
op _appen_ : NonPrivData PrivData -> PrivData [ctor] .
op _appen_ : PrivData PrivData -> PrivData [ctor] .


op _[[[_]]] : Qid ExprList -> Expr . *** function application
op _[[[_]]] : Qid DataList -> Data . *** function application

***converstion of data types into sort DATA

op null : -> NonPrivData [ctor] .
op newuser : Qid -> Uid [ctor] .
op ob :  Qid -> Oid [ctor] .
op n : Nat Oid -> MsgId [ctor] .
op int(_)  : Int       -> NonPrivData [ctor format(o o ! o o)] .
op float(_) : Float    -> NonPrivData [ctor format(o o ! o o)] .
op str(_)  : String    -> NonPrivData [ctor format(o o ! o o)] .
op bool(_) : Bool      -> NonPrivData [ctor format(o o ! o o)] .
op isnothing : DataList -> Bool .


op _asInt             : Data -> Int .
eq int(I)  asInt      = I .
op _asNat             : Data -> Nat .
eq int(N)  asNat      = N .
op _asBool            : Data -> Bool .
eq bool(B) asBool     = B .
op _asStr             : Data -> String .
eq str(S)  asStr      = S .

var N : Nat .    var I : Int .
var B : Bool .   vars S  S' : String . vars Q Q' : Qid .
var O : Oid .


endfm
